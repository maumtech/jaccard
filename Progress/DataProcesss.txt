0. creating vmdk file from E01 file
open ftk Imager lite.
Add E01 file to evidence tree by choosing 'add Evidence Item' with Image file option
Right click the evidence item and choose 'Export Disk Image'
choose Raw(dd) and Image Fragment Size : 0


C:/> cd Program Files/qemu

qemu-img convert   -O vmdk vmdkFile.vmdk encase_image_file
J Jones>> qemu-img convert -O vmdk terry-2009-11-12.E01 terry-2009-11-12.vmdk

1. creating img file
 a) From vmdk file to img file
---------------------------
	qemu-img convert -f vmdk Windows_7_x64.vmdk Windows_7_x64.img

 b) From E01 file to img file
---------------------------
    drive images E01:
 
    http://downloads.digitalcorpora.org/corpora/scenarios/2009-m57-patents/drives-redacted/
 
    scenario:
 
    https://digitalcorpora.org/corpora/scenarios/m57-patents-scenario
 


	Opening the E01 with FTK Imager.
        From FTK, File/Add Evidence Item ... image file
	Right-clicking on the E01 file in the left 'Evidence Tree'
	Selecting 'Export Disk Image'
	'Add' Image Destination.
	Select 'Raw (dd)' in the popup box, and finish the wizard

     Note: set 'image fragment size' :0

2. 
 From img file to hdb
-------------------------
	c:\util\md5deep-4.3\md5deep -p 512 Windows_7_x64.img > md5hash.txt
	using Md5InputForHashDb.java get 'HashDBTabFile' from md5hash.txt

	hashdb create ff_w7_64_20.hdb
	hashdb import_tab ff_w7_64_20.hdb C:/Users/Myeong/workspace/images/14887-firefox/win7x64/20/hashDBTabFile


===============      Md5InputForHashDb.java      source code    =====================================================
package com.myeong;
//this program converts md5hash.txt to tab delimetered file
//which will be imported by hashdb.
//md5hash.txt was generated by the following command
//
//     qemu-img convert -f vmdk Windows_7_x64.vmdk Windows_7_x64.img
 
//     md5deep -p 512 win7x32.img > md5hash.txt
 
//-----  Sample contents of md5hash.txt 
//97f26c6687ff21ae4e870410bf4acecf  /mnt/hgfs/E/images/15151-safari/win7x64/10/Windows_7_x64.img offset 0-511
 
// ------ Input setup
// Input for this program can be a batch file or single  file, 
// which can be controlled by  boolean 'singleFile' in Main;
//    For batch processing,  set Variable 'batchFile'
//

//------------------------------------------------------------------------
//contents of batchFile.txt
//---------------------------------------
//C:/Users/Myeong/workspace/images/15151-safari/win7x64/10/md5hash.txt
//C:/Users/Myeong/workspace/images/15151-safari/win7x64/20/md5hash.txt
//C:/Users/Myeong/workspace/images/15151-safari/win7x64/30/md5hash.txt
//C:/Users/Myeong/workspace/images/15151-safari/win7x64/40/md5hash.txt
//C:/Users/Myeong/workspace/images/15151-safari/win7x64/50/md5hash.txt
//------------------------------------------------------------------------

//    For Single file, set variable 'singleFile' of type 'Path'
//
//---- Output setup
//String variable 'outputTabFile' can be set to give output file name 

import java.io.BufferedWriter;
 
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.nio.file.Paths;
 
public class Md5InputForHashDb {
 
/**
* @param args
*/
//String sourceInput = new String("SourceInput");
String outputTabFile = new String("HashDBTabFile");
 
// For batch job
// String batchFile = "C:/Users/Myeong/workspace/images/batchFile.txt/";
//String batchFile = "D:/2009_M57_Charlie_Image/batchFile.txt/";
//String batchFile = "D:/2009_M57_Jo_Image/batchFile.txt/";
String batchFile = "D:/2009_M57_Pat_Image/batchFile.txt/";
// String batchFile = "C:/workspace/HashDBData/2009-m57-Terry-image/batchFile.txt";

//

// For single file
// Path p1 = Paths.get("C:/Users/Myeong/workspace/images/15151-safari/win7x64/10/sampleMd5.txt");
// Path p1 = Paths.get("C:/Users/Myeong/workspace/images/Windows_7x64.vmdk/md5hash.txt");
// Path singleFile = Paths.get("D:/2009_M57_Charlie_Image/charlie-11-24/md5hash.txt");
Path singleFile = Paths.get("C:/workspace/HashDBData/win-XP-Pro/md5hash.txt");
//Path p1 = Paths.get("C:/Users/Myeong/workspace/Jaccard/TestSample.txt");


public String getMD5(String fileName) throws IOException {
      FileInputStream fis = null;
      try {
            fis = new FileInputStream(new File(fileName));
      } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      }
      String md5 = org.apache.commons.codec.digest.DigestUtils.md5Hex(fis);
     
      // String md5 = "1234567890123456";
      fis.close();
     
      return md5;
}
 
public void BatchRead(String batchFile) {
     
      try (BufferedReader br = new BufferedReader(new FileReader(batchFile))) {
            String line;
          // Read the batch file which lists the path of md5hash.txt
            while ((line = br.readLine()) != null) {
            	System.out.println("---BEGIN---  " +line);
            	if (line.startsWith("#") == false ) {
                   Path p=Paths.get(line);  
                   SourceRead(p);                  
            	} 
            	System.out.println("---END---  " + line);
            }
      } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
 
      }
     
}
 
public void SourceRead(Path p) {
      BufferedWriter bw = null;
      String sourceInput = p.toString();
      String outputTabFileFullpath = p.getParent() + "\\" + outputTabFile;
     
      try (BufferedReader br = new BufferedReader(new FileReader(sourceInput))) {
            String FileMD5 = getMD5(sourceInput);
            FileWriter fw = new FileWriter(outputTabFileFullpath, false); 
                // false:: overwrite the existing file
            bw = new BufferedWriter(fw);
            String line;
           
            long count =0;                                  // path
            while ((line = br.readLine()) != null) {
                  // process the line.
            count++;
                  String[] lineVariables = line.split("\t| ");
                 
                  try {
                  // long index = Long.parseLong(lineVariables[1]) + 1;
                    bw.write(FileMD5 + "\t" + lineVariables[0] + "\t" + count);
                    //System.out.println(FileMD5 + "\t" + lineVariables[0] + "\t" + count);
                  }
                  catch (Exception e) {
                        System.out.println("count:" + count);
                        System.out.println(line);
                        System.out.println("LineVar:" + lineVariables[0]);
                        System.out.println("LineVar:" + lineVariables[1]);
                        e.printStackTrace();
                  }
                 
                 
                  bw.newLine();
                  bw.flush();
            }
      } catch (FileNotFoundException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
      } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
 
      } finally {
            try {
                  if (bw != null) {
                        // File Writer is closed in BufferedWriter.close()
                        bw.close();
                  }
            } catch (Exception ex) {
                  System.out.println("Error in closing the BufferedWriter" + ex);
            }
      }
 
}
 
 
 
public static void main(String[] args) {
     boolean singleFile = true;
	// TODO Auto-generated method stub
      Md5InputForHashDb md5inputForHashdb = new Md5InputForHashDb();
  
      if (singleFile == true) {
         // single file
         md5inputForHashdb.SourceRead(md5inputForHashdb.singleFile);
      } else {
         // batch file
         md5inputForHashdb.BatchRead (md5inputForHashdb.batchFile);
      }
}
 
}
 